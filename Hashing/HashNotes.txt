**Hashing:

->It is nothing but the combination of the steps, pre-storing, and fetching.

-> ASCII (American Standard Code for Information Interchange) is a standard character encoding 
used in telecommunication. The ASCII pronounced ‘ask-ee’, is strictly a seven-bit code 
based on the English alphabet.

** Tables Mapping 
Characters	Decimal	Hexadecimal
0-9			48-57	30-39
A-Z			65-90	41-5A
a-z			97-122	61-7A

**ASCII values  for  letters
 a-z=97 to 122
 A-Z=65 to 90 

 exmaple :
 int x='a' --it will give 97 , as 97 is ascii value for a
 int x='A' = it will give 65 , as 65 is ascii value for Capital A

 ** if any dsa questions,  String Contains capital letters
 take the hash array size 256 chracters

 ---Notes URL
 https://takeuforward.org/hashing/hashing-maps-time-complexity-collisions-division-rule-of-hashing-strivers-a2z-dsa-course/

 **Hashing
 --Collision -- pointing multiple element at same index, this is called collision.
 Two Ways to reduce collision
 1. Chaining:
 --Simple uniform hashing
 -- Linked list
 --load factor()
 -- big omega

 ** Hash Functions:
 1.Divison Method
 -- h(k) -> k%m -- in this m can be size of array or 
 K--is is the number
  m -> we choose prime number  because it will give more random generate number
     > too close to power or  2 or 10 ) -common in real world
2. Multiplication method;
take example : k = 11
for hashing of k:
h(k) = [(a*k)%2power w] >> (w-r)]
a => random number
w => no of bits in k
m = 2 power r
3. universal hashing


** Size of the table;
o =theeta
m = O(n)
1. multiply size of table by 2
--- start table size small and grow
-- if hash table size is full then double the size
 -- but this is alos not efficient
2.

 2. Open Addressing:
 -- this is also another way to reduce collision


