using Azure.Messaging.ServiceBus;
using BDO.APT.ExceptionHandling.BaseModels;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace BDO.APT.ServiceBus
{
    public interface IServiceBusPublish
    {
        /// <summary>
        /// Send Messages
        /// </summary>
        /// <param name="serviceBusMessage">message</param>
        /// <param name="memberFirmId">memberFirmId</param>
        /// <returns>The Task</returns>
        Task SendMessages(ServiceBusMessage serviceBusMessage, int memberFirmId);

        /// <summary>
        /// Send Messages By Batch
        /// </summary>
        /// <param name="servicemessages">servicemessages</param>
        /// <param name="memberFirmId">memberFirmId</param>
        /// <returns>The Task</returns>
        Task SendMessagesByBatch(IEnumerable<ServiceBusMessage> servicemessages, int memberFirmId);

        /// <summary>
        /// Create Topic Async
        /// </summary>
        /// <param name="region"></param>
        /// <returns>bool</returns>
        Task<bool> IsTopicExistsAsync(string region);

        /// <summary>
        ///Send Message sFor Portal Integration
        /// </summary>
        /// <param name="serviceBusMessage">serviceBusMessage</param>
        /// <param name="region">region</param>
        /// <returns>The Task</returns>
        Task SendMessagesForPortalIntegration(ServiceBusMessage serviceBusMessage, string region);

        /// <summary>
        /// Validates if topic is avaiable.
        /// </summary>
        /// <param name="topicName">The name of the topic.</param>
        /// <returns>The true of false.</returns>
        /// <exception cref="APTClientException">The APT Client exception.</exception>
        Task<bool> IsTopicAvailableAsync(string topicName);

        /// <summary>
        /// Sends the message to sevice bus topic or queue.
        /// </summary>
        /// <param name="serviceBusMessage">The message to send.</param>
        /// <param name="queueOrTopicName">The name of topic or queue.</param>
        /// <returns>The Task.</returns>
        /// <exception cref="APTClientException">The APT Client exception.</exception>
        Task SendMessageAsync(ServiceBusMessage serviceBusMessage, string queueOrTopicName);

        ///<summary>
        /// Create ServiceBus Messages
        /// </summary>
        /// <param name="message">message</param>
        /// <returns>ServiceBusMessage</returns>
        ServiceBusMessage CreateServiceBusMessages(string message);
        ///<summary>
        /// Add User Defined Message Property To ServiceBus Messages
        /// </summary>
        /// <param name="serviceBusMessage">message</param>
        /// <param name="entityTypeValue">message</param>
        /// <returns>ServiceBusMessage</returns>
        ServiceBusMessage AddUserDefinedMessagePropertyToServiceBusMessages(ServiceBusMessage serviceBusMessage,string entityTypeValue);

        /// <summary>
        /// Add Duplicate Detection To Service Bus Messages
        /// </summary>
        /// <param name="serviceBusMessage"></param>
        /// <param name="messageId"></param>
        /// <returns></returns>
        ServiceBusMessage AddDuplicateDetectionToServiceBusMessages(ServiceBusMessage serviceBusMessage, string messageId);

        /// <summary>
        /// Create Batch ServiceBus Messages
        /// </summary>
        /// <param name="messages">messages</param>
        /// <returns>The Task</returns>
        IEnumerable<ServiceBusMessage> CreateBatchServiceBusMessages(IEnumerable<string> messages);

        /// <summary>
        /// AddUserDefinedMessagePropertyToBatchServiceBusMessages
        /// </summary>
        /// <param name="servicemessages"></param>
        /// <returns></returns>
        IEnumerable<ServiceBusMessage> AddUserDefinedMessagePropertyToBatchServiceBusMessages(IEnumerable<ServiceBusMessage> servicemessages, string entityTypeValue);
    }
}


--
using Azure.Messaging.ServiceBus;
using Azure.Messaging.ServiceBus.Administration;
using BDO.APT.BusinessEntities.Exception;
using BDO.APT.BusinessEntities.ServerConfiguration;
using BDO.APT.BusinessLogic.CQRS;
using BDO.APT.ExceptionHandling.BaseModels;
using Microsoft.Azure.Amqp.Framing;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace BDO.APT.ServiceBus
{
    public class ServiceBusPublish : IServiceBusPublish
    {
        /// <summary>
        /// the client that owns the connection and can be used to create senders and receivers
        /// </summary>
        private readonly ServiceBusClient serviceBusClient;

        /// <summary>
        /// service bus bettings
        /// </summary>
        private readonly ServiceBusSettings serviceBusSettings;


        /// <summary>
        /// the sender used to publish messages to the topic
        /// </summary>
        private ServiceBusSender sender;

        private readonly ServiceBusAdministrationClient serviceBusAdministrationClient;

        /// <summary>
        /// ServiceBusPublish constructor
        /// </summary>
        /// <param name="serviceBusClient">serviceBusClient</param>
        /// <param name="serviceBusSettings">serviceBusSettings</param>        
        public ServiceBusPublish(ServiceBusClient serviceBusClient, ServiceBusSettings serviceBusSettings, ServiceBusAdministrationClient serviceBusAdministrationClient)
        {
            this.serviceBusClient = serviceBusClient;
            this.serviceBusSettings = serviceBusSettings;
            this.serviceBusAdministrationClient = serviceBusAdministrationClient;
        }

        /// <summary>
        /// Send Messages
        /// </summary>
        /// <param name="serviceBusMessage">serviceBusMessage</param>
        /// <param name="memberFirmId">memberFirmId</param>
        /// <returns>The Task</returns>
        public async Task SendMessages(ServiceBusMessage serviceBusMessage, int memberFirmId)
        {
            try
            {
                // topic name would be topicNamePrefix + memberFirmId, topic will be available for each member firm
                sender = serviceBusClient.CreateSender(serviceBusSettings.Eventing.TopicNamePrefix + memberFirmId.ToString());
                // send the message
                await sender.SendMessageAsync(serviceBusMessage).ConfigureAwait(false);

            }
            catch (Exception ex)
            {
#pragma warning disable S112 // General exceptions should never be thrown
                throw new Exception(ex.Message, ex.InnerException);
#pragma warning restore S112 // General exceptions should never be thrown
            }
            finally
            {
                await sender.DisposeAsync().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Send Messages By Batch
        /// </summary>
        /// <param name="servicemessages">servicemessages</param>
        /// <param name="memberFirmId">memberFirmId</param>
        /// <returns>The Task</returns>
        public async Task SendMessagesByBatch(IEnumerable<ServiceBusMessage> servicemessages, int memberFirmId)
        {

            try
            {
                sender = serviceBusClient.CreateSender(serviceBusSettings.Eventing.TopicNamePrefix + memberFirmId.ToString());
                await sender.SendMessagesAsync(servicemessages).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
#pragma warning disable S112 // General exceptions should never be thrown
                throw new Exception(ex.Message, ex.InnerException);
#pragma warning restore S112 // General exceptions should never be thrown
            }
            finally
            {
                await sender.DisposeAsync().ConfigureAwait(false);
            }
        }

        public async Task<bool> IsTopicExistsAsync(string region)
        {
            try
            {
                return await serviceBusAdministrationClient.TopicExistsAsync(serviceBusSettings.PortalIntergration.TopicNamePrefix + region);
            }
            catch (Exception ex)
            {
                throw new APTClientException(ex.Message);
            }
        }

        public async Task SendMessagesForPortalIntegration(ServiceBusMessage serviceBusMessage, string region)
        {
            try
            {
                // topic name would be topicNamePrefix + memberFirmId, topic will be available for each member firm
                sender = serviceBusClient.CreateSender(serviceBusSettings.PortalIntergration.TopicNamePrefix + region);
                // send the message
                await sender.SendMessageAsync(serviceBusMessage).ConfigureAwait(false);

            }
            catch (Exception ex)
            {
                throw new APTClientException(ex.Message);
            }
            finally
            {
                await sender.DisposeAsync().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Validates if topic is avaiable.
        /// </summary>
        /// <param name="topicName">The name of the topic.</param>
        /// <returns>The true of false.</returns>
        /// <exception cref="APTClientException">The APT Client exception.</exception>
        public async Task<bool> IsTopicAvailableAsync(string topicName)
        {
            try
            {
                return await serviceBusAdministrationClient.TopicExistsAsync(topicName);
            }
            catch (ServiceBusException ex)
            {
                throw new APTClientException(ex.Message);
            }
        }

        /// <summary>
        /// Sends the message to sevice bus topic or queue.
        /// </summary>
        /// <param name="serviceBusMessage">The message to send.</param>
        /// <param name="queueOrTopicName">The name of topic or queue.</param>
        /// <returns>The Task.</returns>
        /// <exception cref="APTClientException">The APT Client exception.</exception>
        public async Task SendMessageAsync(ServiceBusMessage serviceBusMessage, string queueOrTopicName)
        {
            try
            {
                sender = serviceBusClient.CreateSender(queueOrTopicName);
                await sender.SendMessageAsync(serviceBusMessage).ConfigureAwait(false);
            }
            catch (ServiceBusException ex)
            {
                throw new APTClientException(ex.Message);
            }
            finally
            {
                await sender.DisposeAsync().ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Create ServiceBus Messages
        /// </summary>
        /// <param name="message"></param>
        /// <returns></returns>
        public ServiceBusMessage CreateServiceBusMessages(string message)
        {
            return new ServiceBusMessage(message);
        }
        /// <summary>
        /// Add User Defined Message Property To ServiceBus Messages
        /// </summary>
        /// <param name="serviceBusMessage"></param>
        /// <param name="entityTypeValue"></param>
        /// <returns></returns>
        /// <exception cref="InputValidationException"></exception>
        public ServiceBusMessage AddUserDefinedMessagePropertyToServiceBusMessages(ServiceBusMessage serviceBusMessage, string entityTypeValue)
        {
            if (serviceBusMessage == null)
            {
                string errorMessage = ErrorDetails.GetErrorMessage(ErrorCodeConstants.ArgumentNullErrorCode, nameof(serviceBusMessage));
                throw new InputValidationException(ErrorCodeConstants.ArgumentNullErrorCode, errorMessage, nameof(serviceBusMessage));
            }
            serviceBusMessage.ApplicationProperties.Add("EntityType", entityTypeValue);
            return serviceBusMessage;
        }
        /// <summary>
        /// Add Duplicate Detection To ServiceBus Messages
        /// </summary>
        /// <param name="serviceBusMessage"></param>
        /// <param name="messageId"></param>
        /// <returns></returns>
        /// <exception cref="InputValidationException"></exception>
        public ServiceBusMessage AddDuplicateDetectionToServiceBusMessages(ServiceBusMessage serviceBusMessage, string messageId)
        {
            if (serviceBusMessage == null)
            {
                string errorMessage = ErrorDetails.GetErrorMessage(ErrorCodeConstants.ArgumentNullErrorCode, nameof(serviceBusMessage));
                throw new InputValidationException(ErrorCodeConstants.ArgumentNullErrorCode, errorMessage, nameof(serviceBusMessage));
            }
            serviceBusMessage.MessageId = messageId;
            return serviceBusMessage;
        }

        public IEnumerable<ServiceBusMessage> CreateBatchServiceBusMessages(IEnumerable<string> messages)
        {
            if (messages == null || !messages.Any() || messages.Count() > serviceBusSettings.MaximumPublishBatchMessageCount)
            {
                // if it is too large for the batch
#pragma warning disable S112 // General exceptions should never be thrown
                throw new Exception($"Invalid message count");
#pragma warning restore S112 // General exceptions should never be thrown
            }
            // create a batch 
            IList<ServiceBusMessage> servicemessages = new List<ServiceBusMessage>();
            foreach (var message in messages)
            {
                servicemessages.Add(new ServiceBusMessage(message));
            }
            return servicemessages;
        }

        /// <summary>
        /// Add User Defined Message Property To Batch ServiceBusMessages
        /// </summary>
        /// <param name="servicemessages"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public IEnumerable<ServiceBusMessage> AddUserDefinedMessagePropertyToBatchServiceBusMessages(IEnumerable<ServiceBusMessage> servicemessages, string entityTypeValue)
        {
            if (servicemessages == null)
            {
                string errorMessage = ErrorDetails.GetErrorMessage(ErrorCodeConstants.ArgumentNullErrorCode, nameof(servicemessages));
                throw new InputValidationException(ErrorCodeConstants.ArgumentNullErrorCode, errorMessage, nameof(servicemessages));
            }
            foreach (var message in servicemessages)
            {
                message.ApplicationProperties.Add("EntityType", entityTypeValue);
            }
            return servicemessages;
        }
    }
}
